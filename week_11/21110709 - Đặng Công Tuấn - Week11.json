{"paragraphs":[{"text":"%md\n\n<style>\n    .text.plainTextContent {\n        font-size: 25px!important;\n        background-color: #2b2b2b;\n        color: white;\n    }\n</style>","user":"anonymous","dateUpdated":"2023-04-15T16:59:31+0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":20,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1681552762221_155533293","id":"20230409-182449_1088747277","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:31+0700","dateFinished":"2023-04-15T16:59:31+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8651"},{"text":"%pyspark\n\nclass Eng_dict:\n    def __init__(self, data):\n        self.__generate(data)\n        \n    def __generate(self, data):\n        self.__dct = {}\n        \n        for word in data:\n            cur_dct = self.__dct\n            for char in word:\n                if char not in cur_dct:\n                    cur_dct[char] = {}\n                cur_dct = cur_dct[char]\n            cur_dct['def'] = data[word]\n            \n    def lookup(self, keyword):\n        cur_dct = self.__dct\n        for char in keyword:\n            if char not in cur_dct:\n                return None\n            cur_dct = cur_dct[char]\n\n        if 'def' in cur_dct:\n            return cur_dct['def']\n        else:\n            return None\n\n\n    def len_lookup(self, length):\n        def _len_lookup_helper(cur_dct, length, prefix):\n            if length == 0:\n                if 'def' in cur_dct:\n                    yield prefix\n            else:\n                for char in cur_dct.keys() - {'def'}:\n                    yield from _len_lookup_helper(cur_dct[char], length - 1, prefix + char)\n\n        yield from _len_lookup_helper(self.__dct, length, '')","user":"anonymous","dateUpdated":"2023-04-15T16:59:31+0700","config":{"lineNumbers":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762221_1999602310","id":"20230409-182511_1810023369","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:31+0700","dateFinished":"2023-04-15T16:59:31+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8652"},{"text":"%pyspark\n\n# https://github.com/matthewreagan/WebstersEnglishDictionary\n\nimport requests\n\ndct_raw = requests.get('https://cloud.vinhthanh.net/s/ocFaWodJs6dcNtA/download/dictionary.json').json()","user":"anonymous","dateUpdated":"2023-04-15T16:59:31+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762222_1689853218","id":"20230409-184018_1560588700","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:31+0700","dateFinished":"2023-04-15T16:59:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8653"},{"text":"%pyspark\n\ndct = Eng_dict(dct_raw)","user":"anonymous","dateUpdated":"2023-04-15T16:59:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762222_-1438019363","id":"20230409-184457_1909283847","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:37+0700","dateFinished":"2023-04-15T16:59:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8654"},{"text":"%pyspark\n\nprint(dct.lookup('apple'))","user":"anonymous","dateUpdated":"2023-04-15T16:59:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1. The fleshy pome or fruit of a rosaceous tree (Pyrus malus) cultivated in numberless varieties in the temperate zones. Note: The European crab apple is supposed to be the original kind, from which all others have sprung. 2. (bot.)  Any tree genus Pyrus which has the stalk sunken into the base of the fruit; an apple tree. 3. Any fruit or other vegetable production resembling, or supposed to resemble, the apple; as, apple of love, or love apple (a tomato), balsam apple, egg apple, oak apple. 4. Anything round like an apple; as, an apple of gold. Note: Apple is used either adjectively or in combination; as, apple paper or apple-paper, apple-shaped, apple blossom, apple dumpling, apple pudding. Apple blight, an aphid which injures apple trees. See Blight, n. -- Apple borer (Zoöl.), a coleopterous insect (Saperda candida or bivittata), the larva of which bores into the trunk of the apple tree and pear tree. -- Apple brandy, brandy made from apples. -- Apple butter, a sauce made of apples stewed down in cider. Bartlett. -- Apple corer, an instrument for removing the cores from apples. -- Apple fly (Zoöl.), any dipterous insect, the larva of which burrows in apples. Apple flies belong to the genera Drosophila and Trypeta. -- Apple midge (Zoöl.) a small dipterous insect (Sciara mali), the larva of which bores in apples. -- Apple of the eye, the pupil. -- Apple of discord, a subject of contention and envy, so called from the mythological golden apple, inscribed \"For the fairest,\" which was thrown into an assembly of the gods by Eris, the goddess of discord. It was contended for by Juno, Minerva, and Venus, and was adjudged to the latter. -- Apple of love, or Love apple, the tomato (Lycopersicum esculentum). -- Apple of Peru, a large coarse herb (Nicandra physaloides) bearing pale blue flowers, and a bladderlike fruit inclosing a dry berry. -- Apples of Sodom, a fruit described by ancient writers as externally of air appearance but dissolving into smoke and ashes plucked; Dead Sea apples. The name is often given to the fruit of Solanum Sodomæum, a prickly shrub with fruit not unlike a small yellow tomato. -- Apple sauce, stewed apples. [U. S.] -- Apple snail or Apple shell (Zoöl.), a fresh-water, operculated, spiral shell of the genus Ampullaria. -- Apple tart, a tart containing apples. -- Apple tree, a tree naturally bears apples. See Apple, 2. -- Apple wine, cider. -- Apple worm (Zoöl.), the larva of a small moth (Carpocapsa pomonella) which burrows in the interior of apples. See Codling moth. -- Dead Sea Apple. (a) pl. Apples of Sodom. Also Fig. \"To seek the Dead Sea apples of politics.\" S. B. Griffin. (b) A kind of gallnut coming from Arabia. See Gallnut.\n\nTo grow like an apple; to bear apples. Holland.\n"}]},"apps":[],"jobName":"paragraph_1681552762223_2067737119","id":"20230409-184922_452406030","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:37+0700","dateFinished":"2023-04-15T16:59:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8655"},{"text":"%pyspark\n\nlen_lookup_gen = dct.len_lookup(5)\n\nfor i in range(0, 5):\n    next(len_lookup_gen)","user":"anonymous","dateUpdated":"2023-04-15T16:59:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'gnash'\n'gnarl'\n'gnide'\n'gnome'\n'glyph'\n"}]},"apps":[],"jobName":"paragraph_1681552762223_-308590548","id":"20230409-192920_405152923","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:37+0700","dateFinished":"2023-04-15T16:59:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8656"},{"text":"%pyspark\n\nclass Problem:\n    def __init__(self):\n        self.goal = None\n        \n    def get_state(self): pass\n    def get_pos_actions(self): pass\n    def action(self, actions): pass\n    def cost(self, action): pass","user":"anonymous","dateUpdated":"2023-04-15T16:59:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762223_-1768830873","id":"20230409-192219_2026092030","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:37+0700","dateFinished":"2023-04-15T16:59:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8657"},{"text":"%pyspark\n\nclass Any:\n    def __init__(self, *vals):\n        self.vals = vals\n        \n    def __eq__(self, other):\n        if len(self.vals) == 0 or\\\n            other in self.vals:\n            return True\n        return False","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762224_-1385751425","id":"20230409-194805_1088833242","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:38+0700","dateFinished":"2023-04-15T16:59:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8658"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1681552762224_-94439486","id":"20230409-200223_1216134204","dateCreated":"2023-04-15T16:59:22+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8659"},{"text":"%pyspark\n\nfrom itertools import chain, combinations\n\n# https://docs.python.org/3/library/itertools.html#itertools-recipes\n\ndef powerset(iterable):\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762225_-39841851","id":"20230409-214621_1095009105","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:38+0700","dateFinished":"2023-04-15T16:59:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8660"},{"text":"%pyspark\n\nimport string\nimport itertools\n\nclass Word_cookies(Problem):\n    def __init__(self, dct, letters, lengths):\n        self.dct = dct\n        self.letters = letters\n        # Define words, lengths for state\n        self.words = [None] * len(lengths)\n        self.lengths = lengths\n        \n    def get_state(self):\n        Problem.get_state(self)\n        return tuple(self.words)\n        \n    def is_goal(self):\n        for word in words:\n            if word is None or\\\n            self.dct.lookup(word) or\\\n            len(set(word)) != len(word):\n                return False\n            \n            for letter in word:\n                if letter not in self.letters:\n                    return False\n        return True\n    \n    def get_pos_actions(self):\n        Problem.get_pos_actions(self)\n        for letters in powerset(self.letters):\n            if len(letters) < 2:\n                continue\n            for perm in itertools.permutations(letters):\n                yield list(perm)\n    \n    def action(self, *actions):\n        Problem.action(self, actions)\n        for action in actions:\n            if action not in self.get_pos_actions():\n                continue\n                \n            input_word = ''.join(action)\n            if input_word in self.words:\n                    continue\n            \n            for i in range(0, len(self.words)):\n                if self.lengths[i] == len(input_word) and\\\n                self.words[i] is None:\n                    self.words[i] = input_word\n                    break","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762226_-1417335820","id":"20230409-194309_2019600640","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:38+0700","dateFinished":"2023-04-15T16:59:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8661"},{"text":"%pyspark\n\nallowed_letters = ['w', 'o', 'l', 'f']\nword_lens = [4, 3, 4, 3, 4]\ngame = Word_cookies(dct, allowed_letters, word_lens)\n\nprint(game.get_state())\nprint(list(game.get_pos_actions()))","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(None, None, None, None, None)\n[['w', 'o'], ['o', 'w'], ['w', 'l'], ['l', 'w'], ['w', 'f'], ['f', 'w'], ['o', 'l'], ['l', 'o'], ['o', 'f'], ['f', 'o'], ['l', 'f'], ['f', 'l'], ['w', 'o', 'l'], ['w', 'l', 'o'], ['o', 'w', 'l'], ['o', 'l', 'w'], ['l', 'w', 'o'], ['l', 'o', 'w'], ['w', 'o', 'f'], ['w', 'f', 'o'], ['o', 'w', 'f'], ['o', 'f', 'w'], ['f', 'w', 'o'], ['f', 'o', 'w'], ['w', 'l', 'f'], ['w', 'f', 'l'], ['l', 'w', 'f'], ['l', 'f', 'w'], ['f', 'w', 'l'], ['f', 'l', 'w'], ['o', 'l', 'f'], ['o', 'f', 'l'], ['l', 'o', 'f'], ['l', 'f', 'o'], ['f', 'o', 'l'], ['f', 'l', 'o'], ['w', 'o', 'l', 'f'], ['w', 'o', 'f', 'l'], ['w', 'l', 'o', 'f'], ['w', 'l', 'f', 'o'], ['w', 'f', 'o', 'l'], ['w', 'f', 'l', 'o'], ['o', 'w', 'l', 'f'], ['o', 'w', 'f', 'l'], ['o', 'l', 'w', 'f'], ['o', 'l', 'f', 'w'], ['o', 'f', 'w', 'l'], ['o', 'f', 'l', 'w'], ['l', 'w', 'o', 'f'], ['l', 'w', 'f', 'o'], ['l', 'o', 'w', 'f'], ['l', 'o', 'f', 'w'], ['l', 'f', 'w', 'o'], ['l', 'f', 'o', 'w'], ['f', 'w', 'o', 'l'], ['f', 'w', 'l', 'o'], ['f', 'o', 'w', 'l'], ['f', 'o', 'l', 'w'], ['f', 'l', 'w', 'o'], ['f', 'l', 'o', 'w']]\n"}]},"apps":[],"jobName":"paragraph_1681552762226_-2111876588","id":"20230409-195237_2084845408","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:38+0700","dateFinished":"2023-04-15T16:59:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8662"},{"text":"%md\n\n- Quan sát toàn phần \n- Xác định \n- Chia hồi \n- Tĩnh \n- Ràng buộc: \n\t+ Không trùng ký tự \n\n1. Ta cần gì để giải bài toán? Chuỗi hành động hay kết quả? \n2. Tập trạng thái kỳ vọng của bài toán có lớn hay nhỏ? \n3. Có thể có nhiều đáp án/mục tiêu không? ","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":20,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<ul>\n  <li>Quan sát toàn phần</li>\n  <li>Xác định</li>\n  <li>Chia hồi</li>\n  <li>Tĩnh</li>\n  <li>Ràng buộc:\n    <ul>\n      <li>Không trùng ký tự</li>\n    </ul>\n  </li>\n</ul>\n<ol>\n  <li>Ta cần gì để giải bài toán? Chuỗi hành động hay kết quả?</li>\n  <li>Tập trạng thái kỳ vọng của bài toán có lớn hay nhỏ?</li>\n  <li>Có thể có nhiều đáp án/mục tiêu không?</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1681552762227_801225777","id":"20230409-202138_1316013228","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:38+0700","dateFinished":"2023-04-15T16:59:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8663"},{"text":"%pyspark\n\nimport random\ndef h_func(state):\n    goal = 0\n    words = set()\n    for word in state:\n        if word and word not in words and len(set(words))==len(words):\n            words.add(word)\n            if dct.lookup(word)!=None:\n                goal += 1\n    return goal\n\ndef r_func():\n    words = []\n    let = game.letters\n    len_word = game.lengths\n    for length in len_word:\n        word =''.join(random.sample(let, length))\n        words.append(word)\n    return tuple(words)\n\ndef n_func(state):\n    lets = game.letters\n    neighbors = []\n    for i, word in enumerate(state):\n        if word is None:\n            for permutation in itertools.permutations(lets, length):\n                state = state.copy()\n                state[i] = ''.join(permutation)\n                neighbors.append(tuple(state))\n    return neighbors\n        \ndef solve(problem, max_restart, max_iter, max_h, h_func, r_func, n_func):\n    best_state = None\n    best_h = float('-inf')\n    restarts = 0\n    while max_restart > restarts:\n        state=r_func()\n        h=h_func(state)\n        for i in range(max_iter):\n            if h>=max_h:\n                return state\n            neighbors=n_func(state)\n            random.shuffle(neighbors)\n            for neighbor in neighbors:\n                h_neighbor=h_func(neighbor)\n                if h_neighbor>h:\n                    state = neighbor\n                    h=h_neighbor\n                    break\n            else:\n                break\n        if h>best_h:\n            best_h= h\n            best_state=state\n        restarts = restarts + 1\n    return best_state\n        ","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1681552762228_-1022964252","id":"20230409-195333_555634346","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:38+0700","dateFinished":"2023-04-15T16:59:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8664"},{"text":"%pyspark\n\nresult = solve(game, 1000, 1000, 5, h_func, r_func, n_func)\nprint(result)","user":"anonymous","dateUpdated":"2023-04-15T16:59:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":20,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('wolf', 'owl', 'lfwo', 'olw', 'flow')\n"}]},"apps":[],"jobName":"paragraph_1681552762228_-1948759042","id":"20230410-000817_1312991226","dateCreated":"2023-04-15T16:59:22+0700","dateStarted":"2023-04-15T16:59:39+0700","dateFinished":"2023-04-15T16:59:39+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8665"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2023-04-15T16:59:39+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1681552762228_-627299221","id":"20230414-114720_1231929346","dateCreated":"2023-04-15T16:59:22+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8666"}],"name":"21110709 - Đặng Công Tuấn - Week11","id":"2HXPW9SP6","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}